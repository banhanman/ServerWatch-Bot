import asyncio
import logging
import socket
import time
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import config
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=config.TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
SERVER_IP = "192.168.1.100"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ IP –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
SERVER_PORT = 22  # –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (SSH –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
CHECK_INTERVAL = 900  # 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
server_online = True
last_notification_time = 0
notification_cooldown = 3600  # 1 —á–∞—Å –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

def check_server():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10 —Å–µ–∫—É–Ω–¥
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        result = sock.connect_ex((SERVER_IP, SERVER_PORT))
        sock.close()
        
        return result == 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

async def send_notification(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
    for chat_id in config.ADMIN_CHAT_IDS:
        try:
            await bot.send_message(chat_id, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def server_monitor():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    global server_online, last_notification_time
    
    while True:
        current_status = check_server()
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°—Ç–∞—Ç—É—Å: {'Online' if current_status else 'Offline'}")
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ Offline
        if not current_status and server_online:
            server_online = False
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if current_time - last_notification_time > notification_cooldown:
                await send_notification(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n\n"
                                       f"IP: {SERVER_IP}\n"
                                       f"–ü–æ—Ä—Ç: {SERVER_PORT}\n"
                                       f"–í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
                last_notification_time = current_time
        
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å–Ω–æ–≤–∞ –æ–Ω–ª–∞–π–Ω
        elif current_status and not server_online:
            server_online = True
            await send_notification(f"‚úÖ –°–µ—Ä–≤–µ—Ä —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!\n\n"
                                   f"IP: {SERVER_IP}\n"
                                   f"–í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(CHECK_INTERVAL)

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="check_server"))
    keyboard.add(InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
    
    await message.answer(
        f"üñ•Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ {SERVER_IP}\n\n"
        "–Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –µ—Å–ª–∏ –æ–Ω —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
        "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: " + ("üü¢ Online" if server_online else "üî¥ Offline"),
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'check_server')
async def manual_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    
    if user_id not in config.ADMIN_CHAT_IDS:
        await bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.")
        return
    
    await bot.send_message(user_id, "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    is_online = check_server()
    status = "üü¢ Online" if is_online else "üî¥ Offline"
    last_check = time.strftime('%Y-%m-%d %H:%M:%S')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message = (
        f"üñ•Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:\n\n"
        f"‚Ä¢ IP: {SERVER_IP}\n"
        f"‚Ä¢ –ü–æ—Ä—Ç: {SERVER_PORT}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n"
        f"‚Ä¢ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {last_check}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–µ–≤—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    if not is_online:
        message += "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n"
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–∏–Ω–≥–æ–≤–∞–Ω–∏—è
            response = os.system(f"ping -c 1 {SERVER_IP} > /dev/null 2>&1")
            message += f"‚Ä¢ Ping: {'–£—Å–ø–µ—à–Ω–æ' if response == 0 else '–ù–µ—É–¥–∞—á–Ω–æ'}\n"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
            message += "‚Ä¢ Traceroute: –ó–∞–ø—É—â–µ–Ω...\n"
            trace = os.popen(f"traceroute -m 5 {SERVER_IP}").read()
            message += f"<pre>{trace[:500]}</pre>\n\n"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
            
        except Exception as e:
            message += f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_server"))
    
    await bot.send_message(
        user_id,
        message,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'settings')
async def show_settings(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    if user_id not in config.ADMIN_CHAT_IDS:
        await bot.answer_callback_query(callback_query.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å IP", callback_data="change_ip"),
        InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç", callback_data="change_port"),
        InlineKeyboardButton("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="change_interval"),
        InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="manage_admins"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ]
    keyboard.add(*buttons)
    
    await bot.send_message(
        user_id,
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n"
        f"‚Ä¢ –°–µ—Ä–≤–µ—Ä: {SERVER_IP}\n"
        f"‚Ä¢ –ü–æ—Ä—Ç: {SERVER_PORT}\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL // 60} –º–∏–Ω—É—Ç\n"
        f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(config.ADMIN_CHAT_IDS)}",
        reply_markup=keyboard
    )

async def on_startup(dp):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    asyncio.create_task(server_monitor())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for chat_id in config.ADMIN_CHAT_IDS:
        try:
            await bot.send_message(
                chat_id,
                f"üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω!\n\n"
                f"–°–µ—Ä–≤–µ—Ä: {SERVER_IP}:{SERVER_PORT}\n"
                f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL // 60} –º–∏–Ω—É—Ç"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    import os
    os.makedirs('logs', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
